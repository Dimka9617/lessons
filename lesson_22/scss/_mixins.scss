@function percent($num1, $num2) {
	$rez: math.div($num1, $num2) * 100%;
	@return $rez;
}

@function toRem($num1, $num2: 16) {
	$rez: math.div($num1, $num2) + rem;
	@return $rez;
}
@function toEm($num1, $num2: 16) {
	$rez: math.div($num1, $num2) + em;
	@return $rez;
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}
	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поїнти в EM
	$widthFromMedia: toEm($widthFrom);
	$widthToMedia: toEm($widthTo);

	// Формула плаваючого значення
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;
	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}
	$flyValue: #{toRem($yIntersection)}" + " #{$slope * 100}vw;

	// Отримання значення властивості
	$propertyValue: #{"clamp(" toRem($minSize) "," $flyValue "," toRem($startSize) ")"};
	// Якщо негативні значення
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" toRem($startSize) "," $flyValue "," toRem($minSize) ")"};
	}

	// Встановлюємо значення за замовчуванням
	@if $keepSize != 1 and $keepSize != 3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: toRem($startSize);
		}
	}
	// Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
		// Якщо підтримується clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}
		// Якщо не підтримується clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{toRem($minSize)} + #{$addSize} * (100vw - #{toRem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}
	@if $keepSize != 1 and $keepSize != 2 {
		@media (max-width: $widthToMedia) {
			#{$property}: toRem($minSize);
		}
	}
}

// .....

@mixin btn-style($backcolor:$backColorP, $padding:toRem(21) toRem(35), $fz:toRem(18), $color:#fff){
	padding: toRem(21) toRem(35);
	color: #FFF;
	text-align: center;
	font-size: toRem(18);
	font-weight: 600;
	text-transform: capitalize;
	background-color: $backcolor;
	font-size: $fz;
	transition: all .3s;
}

@mixin sub-title($color:$colorDark){
	color: $colorDark;
font-family: $mainFont;
font-size: clamp(toRem(16), 3vw, toRem(18));
display: flex;
align-items: flex-start;
color: #FFF;
font-weight: 600;
line-height: 1.46;
&::before{
	content: "";
	background-color: $backColorG;
	width: toEm(12);
	height: toEm(12);
	flex: 0 0 toEm(12);
	margin-top: toRem(6);
	margin-right: toRem(6);
}

}
@mixin title(){
	color: #FFF;
font-family: $alternativeFont;
font-size: toRem(40);
font-weight: 700;
line-height: 1.21;
}